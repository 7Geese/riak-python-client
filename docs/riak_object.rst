.. ref-riak-object:

==========
RiakObject
==========

The ``RiakObject`` holds meta information about a Riak object, plus the
object's data.


RiakObject Methods
==================

``__init__``
~~~~~~~~~~~~

.. method:: RiakObject.__init__(self, client, bucket, key=None)

Constructs a new RiakObject. The ``client`` argument should be a ``RiakClient``
instance. The ``bucket`` should be a ``RiakBucket`` object.

The ``key`` argument is optional. If not specified, then the ``key`` is
generated by server when ``RiakObject.store`` is called.


``get_bucket``
~~~~~~~~~~~~~~

.. method:: RiakObject.get_bucket(self)

Gets the ``RiakBucket`` instance used by this object.


``get_key``
~~~~~~~~~~~

.. method:: RiakObject.get_key(self)

Gets the key (as a string) for this object.


``get_data``
~~~~~~~~~~~~

.. method:: RiakObject.get_data(self)

Gets the data stored in this object. Returns a dictionary, unless the object
was constructed with ``RiakBucket.new_binary`` or ``RiakBucket.get_binary``,
in which case this will return a string.


``set_data``
~~~~~~~~~~~~

.. method:: RiakObject.set_data(self, data)

Sets the data stored in this object. This data will be JSON encoded unless the
object was constructed with ``RiakBucket.new_binary`` or
``RiakBucket.get_binary``, in which case it will be stored as a string.


``get_encoded_data``
~~~~~~~~~~~~~~~~~~~~

.. method:: RiakObject.get_encoded_data(self)

Gets the data encoded for storing.


``set_encoded_data``
~~~~~~~~~~~~~~~~~~~~

.. method:: RiakObject.set_encoded_data(self, data)

Sets the object data from an encoded string. Make sure the metadata has been
set correctly first.


``get_metadata``
~~~~~~~~~~~~~~~~

.. method:: RiakObject.get_metadata(self)

Gets the metadata stored in this object. Returns a dictionary.


``set_metadata``
~~~~~~~~~~~~~~~~

.. method:: RiakObject.set_metadata(self, metadata)

Sets the metadata stored in this object. ``metadata`` should be a dictionary.


``exists``
~~~~~~~~~~

.. method:: RiakObject.exists(self)

Return ``True`` if the object exists, ``False`` otherwise. Allows you to
detect a ``RiakBucket.get`` or ``RiakBucket.get_binary`` operation where
the object is missing.


``get_content_type``
~~~~~~~~~~~~~~~~~~~~

.. method:: RiakObject.get_content_type(self)

Gets the content type of this object. This is either ``application/json`` or
the provided content type if the object was created via
``RiakBucket.new_binary``.


``set_content_type``
~~~~~~~~~~~~~~~~~~~~

.. method:: RiakObject.set_content_type(self, content_type)

Sets the content type of this object. The ``content_type`` argument should be
a string.


``add_link``
~~~~~~~~~~~~

.. method:: RiakObject.add_link(self, obj, tag=None)

Add a link to a RiakObject. The ``obj`` argument can be either a ``RiakObject``
or a ``RiakLink`` instance.

The optional ``tag`` argument defaults to the bucket name of the object. It
is ignored if ``obj`` is a ``RiakLink`` instance.


``remove_link``
~~~~~~~~~~~~~~~

.. method:: RiakObject.remove_link(self, obj, tag=None)

Remove a link from a RiakObject. The ``obj`` argument can be either a
``RiakObject`` or a ``RiakLink`` instance.

The optional ``tag`` argument defaults to the bucket name of the object. It
is ignored if ``obj`` is a ``RiakLink`` instance.


``get_links``
~~~~~~~~~~~~~

.. method:: RiakObject.get_links(self)

Return an array of ``RiakLink`` objects.


``store``
~~~~~~~~~

.. method:: RiakObject.store(self, w=None, dw=None, return_body=True)

Stores the object in Riak. When this operation completes, the
object could contain new metadata and possibly new data if Riak
contains a newer version of the object according to the object's
vector clock.

The optional ``w`` argument is a wait value (as an integer), meaning wait for
this many partitions to respond before returning to client.

The optional ``dw`` argument is another wait value (as an integer), meaning 
wait for this many partitions to confirm the write before returning to client.

The optional ``return_body`` argument should be either ``True`` or ``False``
and should indicate if the newly stored object should be retrieved.


``reload``
~~~~~~~~~~

.. method:: RiakObject.reload(self, r=None, vtag=None)

Reload the object from Riak. When this operation completes, the object could
contain new metadata and a new value, if the object was updated in Riak since
it was last retrieved.

The optional ``r`` argument is a wait value (as an integer), meaning wait for
this many partitions to respond before returning to client.


``delete``
~~~~~~~~~~

.. method:: RiakObject.delete(self, rw=None)

Delete this object from Riak.

The optional ``rw`` argument is a wait value (as an integer), meaning wait
until this many partitions have deleted the object before responding.


``clear``
~~~~~~~~~

.. method:: RiakObject.clear(self)

Reset this object, essentially making it an empty ``RiakObject`` instance.


``vclock``
~~~~~~~~~~

.. method:: RiakObject.vclock(self)

Gets the vclock (as a string) of this object.


``populate``
~~~~~~~~~~~~

.. method:: RiakObject.populate(self, result)

Populate the object based on the return from get.

If ``None`` is returned, then the object was not found.

If a tuple of vclock is returned, then one or more whole revisions of
the key were found.

If a list of vtags is returned, there are multiple siblings that need to be
retrieved with get.


``populate_links``
~~~~~~~~~~~~~~~~~~

.. method:: RiakObject.populate_links(self, linkHeaders)

This method is private and should not be used directly.


``has_siblings``
~~~~~~~~~~~~~~~~

.. method:: RiakObject.has_siblings(self)

Return ``True`` if this object has siblings.


``get_sibling_count``
~~~~~~~~~~~~~~~~~~~~~

.. method:: RiakObject.get_sibling_count(self)

Gets the number of siblings (as an integer) that this object contains.


``get_sibling``
~~~~~~~~~~~~~~~

.. method:: RiakObject.get_sibling(self, i, r=None)

Retrieve a sibling by sibling number. The ``i`` argument is the sibling number.

The optional ``r`` value is a wait value, meaning wait until this many
partitions have responded before returning to client.


``get_siblings``
~~~~~~~~~~~~~~~~

.. method:: RiakObject.get_siblings(self, r=None)

Retrieve an array of siblings.

The optional ``r`` value is a wait value, meaning wait until this many
partitions have responded before returning to client.


``set_siblings``
~~~~~~~~~~~~~~~~

.. method:: RiakObject.set_siblings(self, siblings)

Sets the array of siblings. This method is used internally.

.. warning::

  Make sure this object is at index 0 so ``RiakObject.get_siblings(0)`` always
  returns the current object.


``add``
~~~~~~~

.. method:: RiakObject.add(self, *args)

Start assembling a Map/Reduce operation. A shortcut for ``RiakMapReduce.add``.

Returns a ``RiakMapReduce`` instance.


``link``
~~~~~~~~

.. method:: RiakObject.link(self, *args)

Start assembling a Map/Reduce operation. A shortcut for ``RiakMapReduce.link``.

Returns a ``RiakMapReduce`` instance.


``map``
~~~~~~~

.. method:: RiakObject.map(self, *args)

Start assembling a Map/Reduce operation. A shortcut for ``RiakMapReduce.map``.

Returns a ``RiakMapReduce`` instance.


``reduce``
~~~~~~~~~~

.. method:: RiakObject.reduce(self, params)

Start assembling a Map/Reduce operation. A shortcut for ``RiakMapReduce.reduce``.

Returns a ``RiakMapReduce`` instance.
