#!/usr/bin/env bash

set -o nounset
set -o errexit

function now
{
    date '+%Y-%m-%d %H:%M:%S'
}

function perr
{
    echo "$(now) [error]: $@" 1>&2
}

function pinfo
{
    echo "$(now) [info]: $@"
}

function errexit
{
    perr "$@"
    exit 1
}

function clean_venvs
{
    for VENV in $(pyenv virtualenvs | awk '/^[[:space:]]*riak-/ { print $1 }')
    do
        pinfo Uninstalling virtualenv "$VENV"
        pyenv uninstall --force "$VENV"
    done
}

function clean_pythons
{
    for RPY in $(pyenv versions | awk '/^[[:space:]]*riak_/ { print $1 }')
    do
        pinfo Uninstalling python "$RPY"
        pyenv uninstall --force "$RPY"
    done
}

function clean_tox
{
    if [[ -d ./.tox ]]
    then
        pinfo Removing ./.tox
        rm -rf ./.tox
    fi
}

function usage
{
    echo "
clean-env: Clean up your pyenv

Usage:

clean-env [-p] [-t] [-v]

-p      Clean up Riak-specific Python versions
-t      Clean up tox
-v      Clean up Riak-specific virtualenvs
"
    exit 0
}

opt_clean_pythons='false'
opt_clean_venvs='false'
opt_clean_tox='false'

while getopts 'ptv' opt; do
    case $opt in
        p)
            opt_clean_pythons='true';;
        t)
            opt_clean_tox='true';;
        v)
            opt_clean_venvs='true';;
        *)
            usage;;
    esac
done

if [[ $opt_clean_venvs == 'true' ]]
then
    clean_venvs
fi

if [[ $opt_clean_pythons == 'true' ]]
then
    clean_pythons
fi

if [[ $opt_clean_tox == 'true' ]]
then
    clean_tox
fi
