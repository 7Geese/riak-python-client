#! /usr/bin/env -- escript
%% -*- erlang -*-
%% -------------------------------------------------------------------
%%
%% reset_riak: Reset riak server
%%
%% Copyright (c) 2010 Basho Techonologies
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% -------------------------------------------------------------------

main([]) ->
    Node = 'riak@127.0.0.1',
    MyNode = 'test@127.0.0.1',
    Cookie = 'riak',

    %% Try and spin up epmd
    case erl_epmd:start() of
        {ok, _} ->
            ok;
        {error, {already_Started, _}} ->
            ok;
        {error, Reason1} ->
            io:format("Could not start erlang port mapper: ~p\n", [Reason1]),
            halt(1)
    end,
    %% Try to spin up net_kernel
    case net_kernel:start([MyNode]) of
        {ok, _} ->
            ok;
        {error, {already_started, _}} ->
            ok;
        {error, Reason2} ->
            io:format("Could not start erlang network kernel: ~p\n", [Reason2]),
            halt(1)
    end,


    %% Initialize cookie 
    true = erlang:set_cookie(Node, Cookie),

    %% Ping to prove we can talk
    pong = net_adm:ping(Node),

    %% Until there is a good way to empty the vnodes, require the 
    %% test to run with ETS and kill the vnode master/sup to empty all the ETS tables
    %% and the ring manager to remove any bucket properties
    ok = rpc:call(Node, application, set_env, [riak_kv, storage_backend, riak_kv_ets_backend]),

    ok = supervisor:terminate_child({riak_kv_sup, Node}, riak_kv_vnode_master),
    ok = supervisor:terminate_child({riak_kv_sup, Node}, riak_kv_vnode_sup),
    ok = supervisor:terminate_child({riak_core_sup, Node}, riak_core_ring_manager),

    {ok, _} = supervisor:restart_child({riak_core_sup, Node}, riak_core_ring_manager),
    {ok, _} = supervisor:restart_child({riak_kv_sup, Node}, riak_kv_vnode_sup),
    {ok, _} = supervisor:restart_child({riak_kv_sup, Node}, riak_kv_vnode_master),
    io:format("ok\n").

